---
# file: roles/common/tasks/main.yml
- block:
  - name: input rhel_subscription username
    pause: prompt="input rhel subscription username"
    run_once: true
    register: rhel_subscription_username
    when: rhel_subscription.username is undefined

  - name: input rhel_subscription password
    pause: prompt="input rhel subscription password"
    run_once: true
    register: rhel_subscription_password
    when: rhel_subscription.password is undefined

  - name: input rhel_subscription pool
    pause: prompt="input rhel subscription pool"
    run_once: true
    register: rhel_subscription_pool
    when: rhel_subscription.pool is undefined

  - name: set rhel_subscription
    set_fact:
      rhel_subscription:
        username: "{{ (rhel_subscription_username.user_input is defined )|ternary(rhel_subscription_username.user_input|default(), rhel_subscription.username) }}"
        password: "{{ (rhel_subscription_password.user_input is defined )|ternary(rhel_subscription_password.user_input|default(), rhel_subscription.password) }}"
        pool: "{{ (rhel_subscription_pool.user_input is defined )|ternary(rhel_subscription_pool.user_input|default(), rhel_subscription.pool) }}"

  when: >
    ansible_distribution == "RedHat" and
    ansible_distribution_major_version == '7' and
    rhel_subscription is defined

- name: packages install for ansible
  yum: name="{{ item }}" state=present
  with_items:
    - openssh-clients
    - libselinux-python

- name: disable selinux
  shell: setenforce Permissive
  when: ansible_selinux.status is undefined or ansible_selinux.status != "disabled"

- block:
  - name: disable selinux setting
    copy: >
      src=etc_selinux_config
      dest=/etc/selinux/config
      owner=root
      group=root
      mode=0644
      backup=yes
    register: is_selinux_setting

  - name: generate hosts files
    lineinfile: >
      dest=/etc/hosts
      regexp='^{{ item }}.*'
      line="{{ item }} {{ hostvars[item].ansible_fqdn }} {{ hostvars[item].ansible_hostname }}"
      state=present
      backup=yes
    when: hostvars[item].ansible_fqdn is defined and generate_host
    register: is_hosts_setting
    with_items: "{{ groups['all'] }}"

  - name: yum proxy settings
    template: >
      src=yum.conf.j2
      dest=/etc/yum.conf
      owner=root
      group=root
      mode=0644
      backup=yes
    register: is_yum_proxy_setting
    when: proxy_env.http_proxy is defined

  - name: nsswitch.conf settings
    template: >
      src=nsswitch.conf.j2
      dest=/etc/nsswitch.conf
      owner=root
      group=root
      mode=0644
      backup=yes
    register: is_nsswitch_setting
    when: ansible_dns.nameservers is undefined

  always:
  - name: common backup settings
    include: backup.yml
    with_flattened:
      - "{{ is_selinux_setting|default() }}"
      - "{{ is_hosts_setting.results|default() }}"
      - "{{ is_yum_proxy_setting|default() }}"
      - "{{ is_nsswitch_setting|default() }}"
    loop_control:
      loop_var: backup_item

- name: kernel update
  include: kernel_update.yml
  when: kernel_update

- name: update package
  yum: name={{ item }} state=latest update_cache=yes
  with_items: "{{ update_pkg }}"

- name: RHEL6 family only setting
  include: rhel6_family.yml
  when: ansible_distribution_major_version == '6'

- name: RHEL7 family only setting
  include: rhel7_family.yml
  when: ansible_distribution_major_version == '7'

- name: Add common group
  group: >
    name="{{ item.group }}"
    gid="{{ item.gid }}"
  with_items: "{{ common_user }}"
  when: common_user is defined and common_user != None

- name: Add common user
  user: >
    name="{{ item.name }}"
    password="{{ item.password }}"
    uid="{{ item.uid }}"
    group="{{ item.group }}"
    comment="{{ item.name }}"
  with_items: "{{ common_user }}"
  when: common_user is defined and common_user != None

- name: reboot after change selinux
  include: reboot.yml
  when: ansible_selinux.status is undefined or ansible_selinux.status != "disabled"
